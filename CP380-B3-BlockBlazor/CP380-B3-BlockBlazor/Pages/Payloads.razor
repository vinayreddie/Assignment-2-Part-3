@page "/payloads"

@using CP380_B1_BlockList.Models
@using CP380_B3_BlockBlazor.Data
@inject PendingTransactionService pendingTransactionList

<h3>Pending Transactions</h3>

@if (payloads == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table border="1" cellpadding="5">
        <thead>
            <tr>
                <th>User</th>
                <th>Item</th>
                <th>Transaction Type</th>
                <th>Amount</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var payload in payloads)
            {
                <tr>
                    <td>@payload.User</td>
                    <td>@payload.Item</td>
                    <td>@payload.TransactionType</td>
                    <td>@payload.Amount</td>
                </tr>
            }
        </tbody>
    </table>
}

<p></p>

<p>@submitResponse</p>

<br />
<br />
<h3>Add a Transaction</h3>

<EditForm Model="@payload" OnValidSubmit="@HandleValidSubmit">
    <div class="form-group">
        <label for="user">User</label>
        <InputText id="user" @bind-Value="payload.User" class="form-control" />
    </div>
    <div class="form-group">
        <label for="ttype">Transaction Type</label>
        <InputSelect id="ttype" @bind-Value="payload.TransactionType">
            <option value="BUY">Buy</option>
            <option value="SELL">Sell</option>
            <option value="GRANT">Grant</option>
        </InputSelect>
    </div>
    <div class="form-group">
        <label for="item">Item</label>
        <InputText id="item" @bind-Value="payload.Item" class="form-control" />
    </div>
    <div class="form-group">
        <label for="amount">Amount</label>
        <InputNumber id="amount" @bind-Value="payload.Amount" class="form-control" />
    </div>
    <button type="submit" class="btn btn-primary">Add Payload</button>
</EditForm>


@code {
    private IEnumerable<Payload> payloads;
    private Payload payload = new Payload("", 0, 0, "");
    private string submitResponse = "";

    protected override async Task OnInitializedAsync()
    {
        // TODO: Fetch all the payloads from the service
        payloads = await pendingTransactionList.GetPayloadsAsync();
    }

    private async Task HandleValidSubmit()
    {
        // TODO: submit the new payload to the web API using the PendingTransactionService
        //       - if succcessful, the payloads should be re-loaded
        //       - if there is an error, then the submitResponse variable should be updated with the error
        var response = await pendingTransactionList.AddPayloadAsync(payload);
        if (response.IsSuccessStatusCode)
        {
            payloads = await pendingTransactionList.GetPayloadsAsync();
        }
        else
        {
            submitResponse = response.StatusCode.ToString();
        }
    }
}
